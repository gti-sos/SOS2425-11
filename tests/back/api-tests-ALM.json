{
	"info": {
		"_postman_id": "dd9902ea-1c38-4482-8fc6-5afc5f46b544",
		"name": "Pruebas API RESOURCE_ALM NeDB",
		"description": "# ðŸš€ Welcome to the antluqmol1 API\n\nThis will help you StartFragmenton analyzing the evolution of aid for dependent individuals in Spain, examining key aspects such as social and economic support systems.EndFragment\n\n## ðŸ”– **How to use this API**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `BASE_URL` inside the environment local and online. Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab. There are some added but you can try even more!\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42116317"
	},
	"item": [
		{
			"name": "Get list of resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200 or 201",
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"// Test for specific header presence",
							"pm.test(\"Response header 'Content-Type' is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Test for body based on the status",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Response body contains 'Initial data loaded successfully'\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"Initial data loaded successfully\");",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    pm.test('Response body is an array of length 10', function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(10);",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get list of resources w Search & pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code 200 or 201",
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"// Test for specific header presence",
							"pm.test(\"Response header 'Content-Type' is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Test for specific header value based on status code",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Response header 'Content-Type' has value 'text/html'\", function () {",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    pm.test(\"Response header 'Content-Type' has value 'application/json'\", function () {",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    });",
							"}",
							"",
							"// Test for body based on the status",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Response body contains 'Initial data loaded successfully'\", function () {",
							"        pm.expect(pm.response.text()).to.include(\"Initial data loaded successfully\");",
							"    });",
							"} else if (pm.response.code === 200) {",
							"    pm.test('Response body is an array of length 2', function () {",
							"    pm.expect(pm.response.json()).to.be.an('array').that.has.lengthOf(2);",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}?populationOver=1000000&year=2024&limit=2&offset=2",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"query": [
						{
							"key": "populationOver",
							"value": "1000000"
						},
						{
							"key": "year",
							"value": "2024"
						},
						{
							"key": "limit",
							"value": "2"
						},
						{
							"key": "offset",
							"value": "2"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post to list of resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for response code",
							"pm.test(\"Response code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Test for response body",
							"pm.test(\"Response body contains success message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Resource created successfully\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"year\": 2025,\n    \"place\": \"Madrid\",\n    \"population\": 3200000,\n    \"dependent_population\": 450000,\n    \"request\": 120000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post with existing resource to list of resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.test(\"Response body contains 'Resource already exists'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Resource already exists\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"year\": 2025,\n    \"place\": \"Madrid\",\n    \"population\": 838383,\n    \"dependent_population\": 83838,\n    \"request\": 9393939\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Post with Wrong Body to list of resources Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Test for response body content",
							"pm.test(\"Response body contains 'Missing required fields'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Missing required fields\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"year\": 2025,\n    \"place\": \"Madrid\",\n    \"population\": 838383,\n    \"request\": 9393939\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Put to list of resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for the response code to ensure it's a valid PUT request",
							"pm.test(\"Status code is 405\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"// Test for the response body to ensure it contains the correct error message",
							"pm.test(\"Response body contains error message\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Method not allowed. Cannot PUT to a list of resources\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// 405 Method Not Allowed, (NO SE PUEDE HACER PUT A UNA LISTA DE RECURSOS):\n{\n  \"population\": 9000000,\n  \"dependent_population\": 1100000\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get specific resource (place)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for specific header presence\r",
							"pm.test(\"Response header 'Content-Type' is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Test for specific header value\r",
							"pm.test(\"Response header 'Content-Type' has value 'application/json'\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"\r",
							"// Test for body\r",
							"pm.test('Response body is an object', function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post to Specific resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"// Test for response body\r",
							"pm.test(\"Response body contains error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Method not allowed\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2025,\r\n  \"population\": 9000000,\r\n  \"dependent_population\": 1200000,\r\n  \"request\": 450000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put to specific resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response body content\r",
							"pm.test(\"Response body has updated message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Updated 1 resources successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"year\": 2025,\r\n  \"place\": \"AragÃ³n\",\r\n  \"population\": 9000000,\r\n  \"dependent_population\": 1200000,\r\n  \"request\": 450000\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AragÃ³n",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AragÃ³n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put to specific resource with different id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
							"    pm.expect(pm.response.text()).to.include(\"Place in body must match URL parameter\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2025,\r\n  \"place\": \"Canarias\",\r\n  \"population\": 9000000,\r\n  \"dependent_population\": 1200000,\r\n  \"request\": 450000\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AragÃ³n",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AragÃ³n"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put to non existing specific resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Test for response body\r",
							"pm.test(\"Response body contains 'Resource not found'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Resource not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2025,\r\n  \"place\": \"Guadalajara\",\r\n  \"population\": 696969,\r\n  \"dependent_population\": 123456,\r\n  \"request\": 4343\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/Guadalajara",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"Guadalajara"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get relation (place & year)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for specific header presence\r",
							"pm.test(\"Response header 'Content-Type' is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Test for specific header value\r",
							"pm.test(\"Response header 'Content-Type' has value 'application/json'\", function () {\r",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"    });\r",
							"\r",
							"// Test for body\r",
							"pm.test('Response body is an object', function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a/2024",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a",
						"2024"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post to relation (place & year)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 405\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Method not allowed\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2024,\r\n  \"place\": \"AndalucÃ­a\",\r\n  \"population\": 9000000,\r\n  \"dependent_population\": 1200000,\r\n  \"request\": 450000\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a/2024",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a",
						"2024"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put to relation (place & year)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for the status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for response body content\r",
							"pm.test(\"Response body contains success message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Resource updated successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"population\": 9000000,\r\n  \"dependent_population\": 1200000,\r\n  \"request\": 450000\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a/2024",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a",
						"2024"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete specific resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// Test for the absence of response body\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/AndalucÃ­a",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"AndalucÃ­a"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete specific relation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// Test for the absence of response body\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}/Castilla - La Mancha/2024",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					],
					"path": [
						"Castilla - La Mancha",
						"2024"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete list of resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// Test for the absence of response body",
							"pm.test(\"Response body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}{{RESOURCE_ALM}}",
					"host": [
						"{{BASE_URL}}{{RESOURCE_ALM}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}